"use strict";(self.webpackChunkstarlake_docs=self.webpackChunkstarlake_docs||[]).push([[9495],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4585:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l={sidebar_position:1,title:"Extract"},i=void 0,c={unversionedId:"examples/extract",id:"examples/extract",isDocsHomePage:!1,title:"Extract",description:"This sample is available in the samples/extract directory",source:"@site/docs/examples/extract.md",sourceDirName:"examples",slug:"/examples/extract",permalink:"/starlake/docs/examples/extract",editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/examples/extract.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Extract"},sidebar:"cometSidebar",previous:{title:"Transform",permalink:"/starlake/docs/howto/transform"},next:{title:"Load",permalink:"/starlake/docs/examples/load"}},s=[{value:"Example 1:",id:"example-1",children:[]},{value:"Example 2:",id:"example-2",children:[]}],p={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This sample is available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"samples/extract")," directory\nFirst you need to set the JDBC connection to the database. Below an example on a H2 database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hocon"},'connections {\n  h2-sample-db {\n    format = "jdbc"\n    options {\n      url: "jdbc:h2:file:/my/h2db/path",\n      driver: "org.h2.Driver"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"Next create a file describing the schema you want to import. We provide below 2 examples."),(0,o.kt)("h3",{id:"example-1"},"Example 1:"),(0,o.kt)("p",null,"Extract all objects from the ",(0,o.kt)("inlineCode",{parentName:"p"},"PUBLIC")," schema."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'jdbcSchemas:\n  - connection: "h2-sample-db" # Connection name as defined in the connections section of the application.conf file\n    schema: "PUBLIC" # Database schema where tables are located\n    tables:\n      - name: "*" # Takes all tables\n    tableTypes: # One or many of the types below\n      - "TABLE"\n      - "VIEW"\n      - "SYSTEM TABLE"\n      - "GLOBAL TEMPORARY"\n      - "LOCAL TEMPORARY"\n      - "ALIAS"\n      - "SYNONYM"\n    template: "domain-template.yml" # Metadata to use for the generated YML file.\n\n')),(0,o.kt)("h3",{id:"example-2"},"Example 2:"),(0,o.kt)("p",null,"Extract only the selected tables from the ",(0,o.kt)("inlineCode",{parentName:"p"},"PUBLIC"),"schema and only the selected columns from the ",(0,o.kt)("inlineCode",{parentName:"p"},"votes")," table."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'jdbcSchemas:\n  - connection: "h2-sample-db" # Connection name as defined in the connections section of the application.conf file\n    schema: "PUBLIC" # Database schema where tables are located\n    tables:\n      - name: "speakers"\n      - name: "votes"\n        columns:\n          - speaker_id\n          - id\n          - rating\n    tableTypes: # One or many of the types below\n      - "TABLE"\n    templateFile: "domain-template.yml" # Metadata to use for the generated YML file.\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"templateFile")," section are used to set the default values for the metadata fields in the generated ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," file."))}m.isMDXComponent=!0}}]);